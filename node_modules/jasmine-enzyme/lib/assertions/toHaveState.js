'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _negateMessage = require('../negateMessage');

var _negateMessage2 = _interopRequireDefault(_negateMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  toHaveState: function toHaveState(util, customEqualityTesters) {
    function toHaveState(enzymeWrapper, stateKey, stateValue) {
      var state = enzymeWrapper.state();

      // error if the state key doesnt exist
      if (!state.hasOwnProperty(stateKey)) {
        return {
          pass: false,
          message: 'Expected component state to have key of "' + stateKey + '"'
        };
      }

      // key exists given above check, and we're not validating over values,
      // so its always true
      if (stateValue === undefined) {
        return {
          pass: true,
          message: 'Expected component state to have key of "' + stateKey + '"'
        };
      }

      return {
        pass: util.equals(state[stateKey], stateValue, customEqualityTesters),
        message: '\n          Expected component state values to match for key "' + stateKey + '":\n          Actual: ' + JSON.stringify(state) + '\n          Expected: ' + JSON.stringify(stateValue) + '\n        '
      };
    }

    return {
      compare: function compare(enzymeWrapper, stateKey, stateValue) {
        return toHaveState(enzymeWrapper, stateKey, stateValue);
      },
      negativeCompare: function negativeCompare(enzymeWrapper, stateKey, stateValue) {
        var result = toHaveState(enzymeWrapper, stateKey, stateValue);

        result.message = (0, _negateMessage2.default)(result.message);
        result.pass = !result.pass;

        return result;
      }
    };
  }
}; /**
    * This source code is licensed under the MIT-style license found in the
    * LICENSE file in the root directory of this source tree. *
    *
    * @providesModule toHaveState
    * 
    */

module.exports = exports['default'];