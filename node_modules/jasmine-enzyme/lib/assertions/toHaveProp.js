'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _negateMessage = require('../negateMessage');

var _negateMessage2 = _interopRequireDefault(_negateMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  toHaveProp: function toHaveProp(util, customEqualityTesters) {
    function toHaveProp(enzymeWrapper, propKey, propValue) {
      var props = enzymeWrapper.props();

      // error if the prop doesnt exist
      if (!props.hasOwnProperty(propKey)) {
        return {
          pass: false,
          message: 'Expected wrapper to have prop "' + propKey + '"'
        };
      }

      // key exists given above check, and we're not validating over values,
      // so its always true
      if (propValue === undefined) {
        return {
          pass: true,
          message: ''
        };
      }

      return {
        pass: util.equals(props[propKey], propValue, customEqualityTesters),
        message: '\n          Expected wrappers prop values to match for key "' + propKey + '":\n          Actual: ' + JSON.stringify(props[propKey]) + '\n          Expected: ' + JSON.stringify(propValue) + '\n        '
      };
    }

    return {
      compare: function compare(enzymeWrapper, propKey, propValue) {
        return toHaveProp(enzymeWrapper, propKey, propValue);
      },
      negativeCompare: function negativeCompare(enzymeWrapper, propKey, propValue) {
        var result = toHaveProp(enzymeWrapper, propKey, propValue);

        result.message = (0, _negateMessage2.default)(result.message);
        result.pass = !result.pass;

        return result;
      }
    };
  }
}; /**
    * This source code is licensed under the MIT-style license found in the
    * LICENSE file in the root directory of this source tree. *
    *
    * @providesModule toHaveProp
    * 
    */

module.exports = exports['default'];