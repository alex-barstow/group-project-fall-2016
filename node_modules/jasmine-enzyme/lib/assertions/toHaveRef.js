'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _negateMessage = require('../negateMessage');

var _negateMessage2 = _interopRequireDefault(_negateMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  toHaveRef: function toHaveRef() {
    function toHaveRef(enzymeWrapper, refName) {
      var _enzymeWrapper$ref = enzymeWrapper.ref(refName);

      var node = _enzymeWrapper$ref.node;


      return {
        pass: !!node,
        message: 'Expected to find a ref "' + refName + '"'
      };
    }

    return {
      compare: function compare(enzymeWrapper, refName) {
        // can only be used with mount, so the `ref` API should be available.
        if (typeof enzymeWrapper.ref !== 'function') {
          return {
            pass: false,
            message: '`toHaveRef` can only be used with enzymes `mount` method.'
          };
        }

        return toHaveRef(enzymeWrapper, refName);
      },
      negativeCompare: function negativeCompare(enzymeWrapper, refName) {
        // can only be used with mount, so the `ref` API should be available.
        if (typeof enzymeWrapper.ref !== 'function') {
          return {
            pass: false,
            message: '`toHaveRef` can only be used with enzymes `mount` method.'
          };
        }

        var result = toHaveRef(enzymeWrapper, refName);

        result.message = (0, _negateMessage2.default)(result.message);
        result.pass = !result.pass;

        return result;
      }
    };
  }
}; /**
    * This source code is licensed under the MIT-style license found in the
    * LICENSE file in the root directory of this source tree. *
    *
    * @providesModule toHaveRef
    * 
    */

module.exports = exports['default'];